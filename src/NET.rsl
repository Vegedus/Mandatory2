scheme NET =
class
  type 
    Net = Stops >< Connections, -- tram nets
    Stops = (StopId -m-> (Capacity >< Time)),
    Connections = (ConnectionID -m-> (Capacity >< Time)),
    StopId = Text, -- names of stops
    ConnectionID = (StopId >< StopId),
    Capacity = Nat, -- capacities
    Time = Nat -- times in number of minutes


  value /* generators */
    empty : Net = ([],[]),  -- the empty net

    -- insert a stop with a given name, capacity and minimum waiting time
    insertStop : StopId >< Capacity >< Time >< Net -> Net
    insertStop(s,c,t,n) is 
      let (ss,cs) = n in
        (ss !! [s +> (c,t)], cs)
      end,

    -- add a connection between given stops, 
    -- with a given capacity and a given minimum driving time 
    addConnection : StopId >< StopId >< Capacity >< Time >< Net -> Net 
    addConnection(s1,s2,c,t,n) is
      let (ss,cs) = n in
        (ss, cs !! [(s1,s2) +> (c,t)] !! [(s2,s1) +> (c,t)] ) -- both directions are added
      end

   
  value /* observers */
    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(s,n) is
      s isin getStops(n),
 
    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
    areDirectlyConnected(s1,s2,n) is
      (s1,s2) isin getConnections(n), -- only has to check one direction

    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> Time
    minDrivingTime(s1,s2,n) is
      let (ss,cs) = n in
        if (s1,s2) ~isin cs then chaos
        else
          let (c,t) = cs(s1,s2) in
            t
          end
        end
      end,


    -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity
    capacity(s1,s2,n) is
      let (ss,cs) = n in
        if (s1,s2) ~isin cs then chaos
        else
          let (c,t) = cs(s1,s2) in
            c
          end
        end
      end,
 
    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity
    capacity(s,n) is
      let (ss,cs) = n in
        if s ~isin ss then chaos
        else
          let (c,t) = ss(s) in
            c
          end
        end
      end,

    -- get the minimum waiting time of a stop 
    minWaitingTime : StopId >< Net -~-> Time
    minWaitingTime(s,n) is
      let (ss,cs) = n in
        if s ~isin ss then chaos
        else
          let (c,t) = ss(s) in
            t
          end
        end
      end,

    -- get stops from a net
    getStops : Net -> Stops
    getStops(n) is
      let (ss,cs) = n in
        ss
      end,

    -- get connections from a net
    getConnections : Net -> Connections
    getConnections(n) is
      let (ss,cs) = n in
        cs
      end


  value /* predicates to check nets */
    isWellformed : Net -> Bool
    isWellformed(n) is 
      stop_not_connected_to_itself(n) /\ 
      connections_connect_only_existing_stops(n) /\ 
      time_and_capacity_greater_than_zero(n),

    stop_not_connected_to_itself : Net -> Bool
    stop_not_connected_to_itself(n) is
      (all s : StopId :-
        s isin getStops(n) =>
          ~areDirectlyConnected(s,s,n)
      ),

    connections_connect_only_existing_stops : Net -> Bool
    connections_connect_only_existing_stops(n) is
      let pairs = dom getConnections(n) in
        (all (s1,s2) : StopId >< StopId :-
          (s1,s2) isin pairs =>
            isIn(s1,n) /\ isIn(s2,n)
        )
      end,

    time_and_capacity_greater_than_zero : Net -> Bool
    time_and_capacity_greater_than_zero(n) is
      let (ss,cs) = n in
        let pairs = rng ss union rng cs in
          (all (c,t) : Capacity >< Time :-
            (c,t) isin pairs =>
              c > 0 /\ t > 0
          )
        end
      end

end  
